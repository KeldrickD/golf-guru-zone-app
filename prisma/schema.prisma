// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  equipment     Equipment[]
  rounds        Round[]
  goals         Goal[]
  comments      Comment[]
  sharedContent SharedContent[]
  settings      Json?     @default("{}")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Golf-specific Models
model Course {
  id          String   @id @default(cuid())
  name        String
  location    String?
  par         Int
  yardage     Int
  difficulty  Float?   // Rating from 1-5
  rounds      Round[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Equipment {
  id               String            @id @default(cuid())
  userId           String
  type             String
  brand            String
  model            String
  purchaseDate     DateTime
  lastUsed         DateTime?
  totalRounds      Int              @default(0)
  averageDistance  Float            @default(0)
  accuracy         Float            @default(0)
  consistency      Float            @default(0)
  maintenanceHistory MaintenanceRecord[]
  shots            Shot[]
  user             User             @relation(fields: [userId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([userId])
}

model MaintenanceRecord {
  id          String    @id @default(cuid())
  equipmentId String
  date        DateTime
  type        String
  notes       String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([equipmentId])
}

model Round {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  courseId  String
  shots     Shot[]
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  sharedContent SharedContent[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

model Shot {
  id          String    @id @default(cuid())
  equipmentId String
  roundId     String
  distance    Float
  accuracy    Float
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  round       Round     @relation(fields: [roundId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([equipmentId])
  @@index([roundId])
}

model ClubDistance {
  id         String @id @default(cuid())
  userId     String
  club       String
  avgDistance Int
  minDistance Int?
  maxDistance Int?
  shotCount   Int   @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, club])
}

// Shared Content Model for PDF links and social sharing
model SharedContent {
  id          String   @id @default(cuid())
  userId      String
  roundId     String?
  goalId      String?
  type        String   // "round", "goal", "achievement"
  title       String
  description String?  @db.Text
  imageUrl    String?
  likes       Int      @default(0)
  comments    Comment[]
  user        User     @relation(fields: [userId], references: [id])
  round       Round?   @relation(fields: [roundId], references: [id])
  goal        Goal?    @relation(fields: [goalId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([roundId])
  @@index([goalId])
}

model Comment {
  id              String        @id @default(cuid())
  userId          String
  sharedContentId String
  content         String       @db.Text
  user            User         @relation(fields: [userId], references: [id])
  sharedContent   SharedContent @relation(fields: [sharedContentId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([userId])
  @@index([sharedContentId])
}

model Goal {
  id            String        @id @default(cuid())
  userId        String
  title         String
  description   String?      @db.Text
  targetDate    DateTime?
  status        String       @default("in_progress") // in_progress, completed, abandoned
  progress      Float        @default(0)
  sharedContent SharedContent[]
  user          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
}
